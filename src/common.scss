@function borderRadius($value: 1) {
  @return calc(#{$value} * var(--border-radius));
}

@function spacing($value: 1) {
  @return calc(#{$value} * var(--spacing));
}

@function color($color: primary, $elevation: 0, $mode: dark, $opacity: 1) {
  @if $color == paper {
    @return if(
      $mode == dark,
      hsla(
        var(--hue-paper),
        calc(11.11% * var(--paper-strength)),
        #{9% + 4.5% * $elevation},
        #{$opacity}
      ),
      hsla(
        var(--hue-paper),
        calc(
          #{100% - 94.5% * $elevation + 26.9% * $elevation * $elevation} * var(--paper-strength)
        ),
        #{98% - 3.92% * $elevation},
        #{$opacity}
      )
    );
  } @else if $color == focus {
    @return hsla(
      calc(var(--hue-primary) + 180),
      calc(100% * var(--primary-strength)),
      #{77.5% + 10% * $elevation},
      #{$opacity}
    );
  } @else if $color == primary {
    @return hsla(
      var(--hue-primary),
      calc(100% * var(--primary-strength)),
      #{77.5% + 10% * $elevation},
      #{$opacity}
    );
  } @else if $color == warning {
    @if ($elevation == 0) {
      @return if($mode == dark, #1f1c18, #fff4e5);
    } @else {
      @return if($mode == dark, #e89823, #fff4e5);
    }
  } @else {
    @if ($elevation == 0) {
      @return if($mode == dark, #160b0b, #fdeded);
    } @else {
      @return if($mode == dark, #dd3d32, #fdeded);
    }
  }
}

@function textColor($color: primary, $elevation: 0, $mode: dark) {
  @if $color == paper {
    @return if(
      $mode == dark,
      hsla(
        var(--hue-paper),
        calc(
          #{32.2% - 17.8% * $elevation + 3.94% * $elevation * $elevation} * var(--paper-strength)
        ),
        #{92.6% - 4.87% * $elevation},
        1
      ),
      hsla(
        var(--hue-paper),
        calc(14.29% * var(--paper-strength)),
        #{4.53% + 6.56% * $elevation},
        1
      )
    );
  } @else if $color == focus {
    @return hsla(
      calc(var(--hue-primary) + 180),
      calc(100% * var(--primary-strength)),
      #{6.42% + 1.75% * $elevation},
      1
    );
  } @else if $color == primary {
    @return hsla(
      var(--hue-primary),
      calc(100% * var(--primary-strength)),
      #{6.42% + 1.75% * $elevation},
      1
    );
  } @else if $color == warning {
    @return if($mode == dark, #ffe2b7, #663c00);
  } @else {
    @return if($mode == dark, #f4c7c7, #5f2120);
  }
}

@mixin typography($variant: body) {
  @include override {
    @if $variant == h3 {
      font-size: 2.25rem;
    } @else if $variant == h4 {
      font-size: 1.75rem;
    } @else if $variant == h5 {
      font-size: 1.5rem;
    } @else if $variant == h6 {
      font-size: 1.25rem;
    } @else if $variant == body {
      font-size: 1rem;
    } @else if $variant == body2 {
      font-size: 0.875rem;
    }
  }
}

@mixin override($mode: both) {
  @if $mode == both {
    :root:not(#abcd).better-uoft & {
      @content;
    }
  } @else if $mode == dark {
    :root:not(#abcd).better-uoft.uoft-dark-mode & {
      @content;
    }
  } @else {
    :root:not(#abcd).better-uoft:not(.uoft-dark-mode) & {
      @content;
    }
  }
}

@mixin theme {
  :root:not(#abcd).better-uoft {
    * {
      background-color: transparent;
      border-color: transparent;
      font-family: Arial, Helvetica, sans-serif !important;
      box-sizing: border-box;
    }

    &.uoft-dark-mode {
      color-scheme: dark;
      color: textColor(paper, 0, dark);
      background-color: color(paper, 0, dark);
    }

    &:not(.uoft-dark-mode) {
      color-scheme: light;
      color: textColor(paper, 0, light);
      background-color: color(paper, 0, light);
    }

    & {
      --border-radius: 4px;
      --spacing: 8px;
      --hue-primary: 200;
      --hue-paper: 200;
      --paper-strength: 0;
      --primary-strength: 1;
      transition: background-color 0.2s;
    }

    &,
    body {
      font-size: unset;
    }
  }
}

@mixin paper($elevation: 1) {
  @include override(light) {
    background: color(paper, $elevation, light);
    border-color: color(paper, $elevation + 1, light);
    color: textColor(paper, $elevation, light);
  }

  @include override(dark) {
    background: color(paper, $elevation, dark);
    border-color: color(paper, $elevation + 1, dark);
    color: textColor(paper, $elevation, dark);
  }

  @include override {
    border-width: 1px;
    border-style: solid;
    border-radius: borderRadius(1.5);
  }
}

@mixin link() {
  @include override(light) {
    color: textColor(primary, 0, light);
    border: 1px solid transparent;

    &:hover {
      text-decoration: none;
    }

    &:focus-visible {
      border: 1px solid color(focus, 0, light);
      outline: none;
    }
  }

  @include override(dark) {
    color: color(primary, 0, dark);
    border: 1px solid transparent;

    &:hover {
      text-decoration: none;
    }

    &:focus-visible {
      border: 1px solid color(focus, 0, dark);
      outline: none;
    }
  }

  @include override {
    text-decoration: underline;
  }
}

@mixin button($variant: filled) {
  @include typography;

  @if $variant == filled {
    @include override(light) {
      border: 1px solid color(primary, 0, light);
      color: textColor(primary, 0, light);
      background: color(primary, 0, light);

      &:hover {
        background: color(primary, 1, light);
      }

      &:focus-visible {
        border: 1px solid color(focus, 0, light);
        box-shadow: 0 0 0 2px color(focus, 1, light);
        outline: none;
      }

      &:disabled {
        background: color(paper, 3, light);
        border: 1px solid color(paper, 3, light);
        color: textColor(paper, 3, light);
      }

      &:disabled:hover {
        cursor: not-allowed;
      }
    }

    @include override(dark) {
      border: 1px solid color(primary, 0, dark);
      color: textColor(primary, 0, dark);
      background: color(primary, 0, dark);

      &:hover {
        background: color(primary, 1, dark);
      }

      &:focus-visible {
        border: 1px solid color(focus, 1, dark);
        box-shadow: 0 0 0 2px color(focus, 0, dark);
        outline: none;
      }

      &:disabled {
        background: color(paper, 3, dark);
        border: 1px solid color(paper, 3, dark);
        color: textColor(paper, 3, dark);
      }

      &:disabled:hover {
        cursor: not-allowed;
      }
    }

    @include override {
      border-radius: borderRadius();
      cursor: pointer;
      transition: background-color 0.2s;
    }
  } @else if $variant == text {
    @include override(light) {
      color: textColor(paper, 0, light);

      &:hover {
        background: color(primary, 0, light);
        color: textColor(primary, 0, light);
      }

      &:focus-visible {
        border: 1px solid color(focus, 0, light);
        box-shadow: 0 0 0 2px color(focus, 1, light);
        outline: none;
      }

      &:disabled:hover {
        cursor: not-allowed;
      }
    }

    @include override(dark) {
      color: textColor(paper, 0, dark);

      &:hover {
        background: color(primary, 0, dark);
        color: textColor(primary, 0, dark);
      }

      &:focus-visible {
        border: 1px solid color(focus, 1, dark);
        box-shadow: 0 0 0 2px color(focus, 0, dark);
        outline: none;
      }

      &:disabled:hover {
        cursor: not-allowed;
      }
    }

    @include override {
      border-radius: borderRadius();
      cursor: pointer;
      transition: background-color 0.2s;
    }
  }
}

@mixin input() {
  @include typography;

  @include override(light) {
    border: 1px solid color(paper, 3, light);
    color: textColor(paper, 2, light);
    background: color(paper, 2, light);
    caret-color: textColor(paper, 2, light);

    &:hover {
      background: color(paper, 2, light);
      border: 1px solid color(focus, 0, light);
    }

    &:focus-visible {
      border: 1px solid color(focus, 0, light);
      box-shadow: 0 0 0 2px color(focus, 1, light);
      outline: none;
    }

    &:-webkit-autofill,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus-visible,
    &:-internal-autofill-previewed,
    &:-internal-autofill-previewed:hover,
    &:-internal-autofill-selected,
    &:-internal-autofill-selected:focus-visible {
      box-shadow: 0 0 0 1000px #{color(paper, 0, light)} inset;
    }
  }

  @include override(dark) {
    border: 1px solid color(paper, 3, dark);
    color: textColor(paper, 2, dark);
    background: color(paper, 2, dark);
    caret-color: textColor(paper, 2, dark);

    &:hover {
      background: color(paper, 2, dark);
      border: 1px solid color(focus, 0, dark);
    }

    &:focus-visible {
      border: 1px solid color(focus, 1, dark);
      box-shadow: 0 0 0 2px color(focus, 0, dark);
      outline: none;
    }

    &:-webkit-autofill,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus-visible,
    &:-internal-autofill-previewed,
    &:-internal-autofill-previewed:hover,
    &:-internal-autofill-selected,
    &:-internal-autofill-selected:focus-visible {
      box-shadow: 0 0 0 1000px #{color(paper, 0, dark)} inset;
    }
  }

  @include override {
    border-radius: borderRadius();
    transition: background-color 0.2s, border 0.2s, box-shadow 0.2s;
  }
}

@mixin alert($color: primary, $variant: outlined, $elevation: 0) {
  @include override(light) {
    background: color($color, $elevation, light);
    border: 1px solid color($color, $elevation + 1, light);
    color: textColor($color, $elevation + 1, light);
  }

  @include override(dark) {
    background: color($color, $elevation, dark);
    border: 1px solid color($color, $elevation + 1, dark);
    color: textColor($color, $elevation + 1, dark);
  }

  @include override {
    border-radius: borderRadius(1.5);
    transition: background-color 0.2s;
  }
}
