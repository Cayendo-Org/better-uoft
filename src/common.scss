@function borderRadius($value: 1) {
  @return calc(#{$value} * var(--border-radius));
}

@function spacing($value: 1) {
  @return calc(#{$value} * var(--spacing));
}

@function color($color: primary, $elevation: 0, $mode: dark) {
  @if $color == paper {
    @return if(
      $mode == dark,
      hsla(var(--hue-primary), 11.11%, #{9% + 4.5% * $elevation}, 1),
      hsla(
        var(--hue-primary),
        #{100% - 94.5% * $elevation + 26.9% * $elevation * $elevation},
        #{98% - 3.92% * $elevation},
        1
      )
    );
  } @else if $color == secondary {
    @return hsla(var(--hue-primary), 100%, #{77.5% + 10% * $elevation}, 1);
  } @else if $color == primary {
    @return hsla(
      calc(var(--hue-primary) + 180),
      100%,
      #{77.5% + 10% * $elevation},
      1
    );
  } @else if $color == warning {
    @if ($elevation == 0) {
      @return if($mode == dark, #191207, #fff4e5);
    } @else {
      @return if($mode == dark, #e89823, #fff4e5);
    }
  } @else {
    @if ($elevation == 0) {
      @return if($mode == dark, #160b0b, #fdeded);
    } @else {
      @return if($mode == dark, #dd3d32, #fdeded);
    }
  }
}

@function textColor($color: primary, $elevation: 0, $mode: dark) {
  @if $color == paper {
    @if $mode == dark {
      @return hsla(
        var(--hue-primary),
        #{32.2% - 17.8% * $elevation + 3.94% * $elevation * $elevation},
        #{92.6% - 4.87% * $elevation},
        1
      );
    } @else {
      @return hsla(
        var(--hue-primary),
        14.29%,
        #{4.53% + 6.56% * $elevation},
        1
      );
    }
  } @else if $color == secondary {
    @return hsla(var(--hue-primary), 100%, #{6.42% + 1.75% * $elevation}, 1);
  } @else if $color == primary {
    @return hsla(
      calc(var(--hue-primary) + 180),
      100%,
      #{6.42% + 1.75% * $elevation},
      1
    );
  } @else if $color == warning {
    @return if($mode == dark, #ffe2b7, #663c00);
  } @else {
    @return if($mode == dark, #f4c7c7, #5f2120);
  }
}

@mixin typography($variant: body) {
  @if $variant == body {
    font-size: 1rem;
  } @else if $variant == body2 {
    font-size: 0.78rem;
  }
}

@mixin override($mode: both) {
  @if $mode == both {
    :root:not(#abcd).better-uoft & {
      @content;
    }
  } @else if $mode == dark {
    :root:not(#abcd).better-uoft.uoft-dark-mode & {
      @content;
    }
  } @else {
    :root:not(#better-uoft-off, .uoft-dark-mode) & {
      @content;
    }
  }
}

@mixin theme {
  :root:not(#abcd).better-uoft {
    * {
      background-color: transparent;
      font-family: Arial, Helvetica, sans-serif !important;
      box-sizing: border-box;
    }

    &.uoft-dark-mode {
      color-scheme: dark;
      color: textColor(paper, 0, dark);
      background-color: color(paper, 0, dark);
    }

    &:not(.uoft-dark-mode) {
      color-scheme: light;
      color: textColor(paper, 0, light);
      background-color: color(paper, 0, light);
    }

    &,
    body {
      font-size: unset;
      --border-radius: 4px;
      --spacing: 8;
      --hue-primary: 40;
    }
  }
}

@mixin paper($elevation: 1) {
  @include override(light) {
    background: color(paper, $elevation, light);
    border-color: color(paper, $elevation + 1, light);
    color: textColor(paper, $elevation, light);
  }

  @include override(dark) {
    background: color(paper, $elevation, dark);
    border-color: color(paper, $elevation + 1, dark);
    color: textColor(paper, $elevation, dark);
  }

  @include override {
    border-width: 1px;
    border-style: solid;
    border-radius: borderRadius(1.5);
  }
}

@mixin link($color: primary, $elevation: 0) {
  @include override(light) {
    color: textColor($color, $elevation, light);

    &:hover {
      text-decoration: none;
    }
  }

  @include override(dark) {
    color: color($color, $elevation, dark);

    &:hover {
      text-decoration: none;
    }
  }

  @include override {
    text-decoration: underline;
  }
}

@mixin button($color: primary, $variant: filled, $elevation: 0) {
  @include typography;

  @if $variant == filled {
    @include override(light) {
      border: 1px solid color($color, $elevation, light);
      color: textColor($color, $elevation, light);
      background: color($color, $elevation, light);

      &:hover {
        background: color($color, $elevation + 1, light);
      }
    }

    @include override(dark) {
      border: 1px solid color($color, $elevation, dark);
      color: textColor($color, $elevation, dark);
      background: color($color, $elevation, dark);

      &:hover {
        background: color($color, $elevation + 1, dark);
      }
    }

    @include override {
      border-radius: borderRadius();
      transition: background-color 0.3s;
    }
  } @else if $variant == text {
    @include override(light) {
      color: textColor($color, $elevation, light);

      &:hover {
        background: color($color, $elevation + 1, light);
      }
    }

    @include override(dark) {
      color: textColor($color, $elevation, dark);

      &:hover {
        background: color($color, $elevation + 1, dark);
      }
    }

    @include override {
      border-radius: borderRadius();
      transition: background-color 0.3s;
    }
  }
}

@mixin alert($color: primary, $variant: outlined, $elevation: 0) {
  @include override(light) {
    background: color($color, $elevation, light);
    border: 1px solid color($color, $elevation + 1, light);
    color: textColor($color, $elevation + 1, light);
  }

  @include override(dark) {
    background: color($color, $elevation, dark);
    border: 1px solid color($color, $elevation + 1, dark);
    color: textColor($color, $elevation + 1, dark);
  }

  @include override {
    border-radius: borderRadius(1.5);
    transition: background-color 0.3s;
  }
}
